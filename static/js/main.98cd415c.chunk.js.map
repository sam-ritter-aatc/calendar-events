{"version":3,"sources":["utils/WildApricotConversions.js","utils/WildApricotUtils.js","utils/WildApricotEvents.js","utils/WildApricotContacts.js","components/event-calendar/EventCalendar.js","components/SwitchableTextInput.js","components/event-data-loader/EventDataLoader.js","components/SwitchableHtmlDisplay.js","components/event-display/EventDisplay.js","components/SwitchableDatePicker.js","components/event-edit/EventEditor.js","App.js","serviceWorker.js","index.js","utils/WildApricotOAuthUtils.js"],"names":["convertSingleEvent","waEvent","event","Object","assign","Sessions","eList","forEach","item","e","Id","parentId","Title","StartDate","EndDate","StartTimeSpecified","EndTimeSpecified","isRecurringSession","isOrganizedEvent","Details","Organizer","push","module","exports","Array","isArray","x","makeBaseUrl","token","process","Permissions","AccountId","makeAuthHeader","token_type","access_token","axios","require","getEventById","eventId","cb","a","console","log","url","method","headers","then","result","data","catch","err","getEvents","startDate","get","params","$filter","Events","getContact","contactId","id","firstName","FirstName","lastName","LastName","email","Email","displayName","DisplayName","isAdmin","FieldValues","fields","adminField","filter","SystemCode","length","Value","EventCalendar","calendarComponentRef","React","createRef","state","events","member","calendarWeekends","waToken","showEvent","editEvent","handleEventClick","arg","setState","eventInfo","handleDateClick","queryStringValues","queryString","parse","this","props","location","search","firstDate","Date","setFullYear","getFullYear","setMonth","getMonth","getAuthTokens","mid","contact","toISOString","myEvents","eventConvert","map","title","Name","replace","start","end","Url","Tags","backgroundColor","getEventColor","name","test","path","to","pathname","buildRedirect","className","defaultView","firstDay","fixedWeekCount","header","left","center","right","plugins","dayGridPlugin","timeGridPlugin","listPlugin","interactionPlugin","bootstrapPlugin","themeSystem","displayEventTime","selectable","ref","weekends","dateClick","eventClick","onClick","createEvent","Component","SwitchableTextInput","data-testid","label","inputFlag","type","value","onChange","target","EventDataLoader","color","height","width","displayFlag","renderHTML","EventDisplay","fetch","organizer","extendedProps","sess","Number","sessionId","Location","DescriptionHtml","SwitchableDatePicker","editFlag","selected","handleChange","showTimeSelect","timeFormat","timeIntervals","timeCaption","dateFormat","endDate","minDate","toLocaleString","EventEditor","handleStartChange","dt","date","isEditing","description","editor","ClassicEditor","onInit","getData","onBlur","onFocus","App","basename","exact","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message","qs","basicAuthHeader","Buffer","toString","body","grant_type","scope","obtain_refresh_token","postConfig","post","stringify"],"mappings":"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","file":"static/js/main.98cd415c.chunk.js","sourcesContent":["\nconst eventConvert = (waEvent) => {\n    let eList = [];\n    if( Array.isArray(waEvent)) {\n        waEvent.forEach((item) => {\n            let x = convertSingleEvent(item);\n            if( Array.isArray(x)) {\n                x.forEach((item) => {\n                    eList.push(item);\n                })\n            } else {\n                eList.push(x);\n            }\n        });\n    } else {\n        eList.push(convertSingleEvent(waEvent));\n    }\n    return eList;\n}\n\nconst convertSingleEvent = (waEvent) => {\n    let event = Object.assign({}, waEvent) ;\n\n    if ( waEvent.Sessions ) {\n        let eList = [];\n        waEvent.Sessions.forEach((item) => {\n            let e = Object.assign({}, event);\n            e.Id = item.Id;\n            e.parentId = event.Id;\n            e.Title = item.Title;\n            e.StartDate = item.StartDate;\n            e.EndDate = item.EndDate;\n            e.StartTimeSpecified = item.StartTimeSpecified;\n            e.EndTimeSpecified = item.EndTimeSpecified;\n            e.isRecurringSession = true;\n            e.isOrganizedEvent = item.Details && item.Details.Organizer;\n            delete e.Sessions\n            eList.push(e);\n        })\n        return eList;\n    } else {\n        return event;\n    }\n}\nmodule.exports = eventConvert;","\nexport const makeBaseUrl = (token) => {\n    return process.env.REACT_APP_WA_BASE_URL + '/accounts/' + token.Permissions[0].AccountId;\n}\n\nexport const makeAuthHeader = (token) => {\n    return token.token_type + ' ' +token.access_token;\n}","import {makeAuthHeader, makeBaseUrl} from \"./WildApricotUtils\";\nconst axios = require('axios');\n\nconst eventsUrlPart = '/events';\n\nexport const getEventById = async (token, eventId, cb) => {\n    console.log(\"getEventById\", eventId);\n    await axios({\n        url: makeBaseUrl(token)+eventsUrlPart+'/'+eventId,\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': makeAuthHeader(token)\n        }\n    })\n        .then((result) => {\n            console.log(\"RESULT\", result)\n            cb(result.data);\n             // return result.data;\n        })\n        .catch((err) => {\n            console.log(\"## Error ##\", err);\n            cb({});\n        })\n}\n\nexport const getEvents = async (token, startDate, cb) => {\n    await axios.get(makeBaseUrl(token)+eventsUrlPart, {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': makeAuthHeader(token)\n        },\n        params: {\n            $filter: \"StartDate ge \"+startDate\n        }\n    })\n        .then((result) => {\n            cb(result.data.Events);\n        })\n        .catch((err) => {\n            console.log(\"Error\", err);\n            cb([]);\n        });\n};\n\n","import {makeBaseUrl, makeAuthHeader} from \"./WildApricotUtils\";\n\nconst axios = require('axios');\n\nexport const getContact = async (token, contactId, cb) => {\n    await axios.get(makeBaseUrl(token) + '/contacts/' + contactId, {\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': makeAuthHeader(token)\n        }\n    })\n        .then((result) => {\n            let e = {};\n\n            e.id = result.data.Id;\n            e.firstName = result.data.FirstName;\n            e.lastName = result.data.LastName;\n            e.email = result.data.Email;\n            e.displayName = result.data.DisplayName;\n            e.isAdmin = isAdmin(result.data.FieldValues);\n\n            cb(e);\n        })\n        .catch((err) => {\n            cb(null);\n        })\n}\n\nconst isAdmin = (fields) => {\n    let adminField = fields.filter(x => x.SystemCode === 'AdminRole');\n    return adminField.length>0 && adminField[0].Value.length > 0;\n}","import React, {Component} from 'react';\nimport {getAuthTokens} from \"../../utils/WildApricotOAuthUtils\";\nimport {getEvents} from '../../utils/WildApricotEvents';\nimport eventConvert from '../../utils/WildApricotConversions';\n\nimport FullCalendar from '@fullcalendar/react'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport timeGridPlugin from '@fullcalendar/timegrid'\nimport interactionPlugin from '@fullcalendar/interaction' // needed for dayClick\nimport bootstrapPlugin from \"@fullcalendar/bootstrap\";\nimport listPlugin from '@fullcalendar/list';\nimport {Redirect} from 'react-router-dom';\nimport queryString from 'query-string';\n\nimport \"./EventCalendar.css\";\nimport {getContact} from \"../../utils/WildApricotContacts\";\n\n\nexport default class EventCalendar extends Component {\n    calendarComponentRef = React.createRef()\n\n    state = {\n        events: [],\n        member: null,\n        calendarWeekends: true,\n        waToken: {},\n        showEvent: false,\n        editEvent: false\n    }\n\n    async componentDidMount() {\n        const queryStringValues = queryString.parse(this.props.location.search);\n        console.log(\"QUERY_PARAMS\", this.props.location.search,queryStringValues);\n        let firstDate = new Date();\n        firstDate.setFullYear(firstDate.getFullYear() - 1);\n        firstDate.setMonth(firstDate.getMonth() - 6);\n        console.log(\"FIRST DATE\", firstDate)\n\n        await getAuthTokens((data) => this.setState({waToken: data}));\n        if ( queryStringValues.mid && queryStringValues.mid !== \"0\") {\n            await getContact(this.state.waToken, queryStringValues.mid, (contact) => {this.setState({member: contact})})\n            console.log(\"Retrieve Member\", this.state.member);\n        }\n        await getEvents(this.state.waToken, firstDate.toISOString(), (data) => {\n            var myEvents = eventConvert(data).map((event) => {\n                return {\n                    id: event.Id,\n                    title: event.Name.replace(\"Weekly Workout - \", \"\")\n                        .replace(\"Weekly Workout- \",\"\"),  // shorten string in event\n                    start: event.StartDate,\n                    end: event.EndDate,\n                    Url: event.Url,\n                    Tags: event.Tags,\n                    backgroundColor: this.getEventColor(event),\n                    parentId: event.parentId\n                }\n            });\n            this.setState({events: myEvents});\n        });\n    }\n\n    fixEventName(name) {\n        return name;\n    }\n\n    getEventColor(event) {\n        if ( /Race/.test(event.Name) ) {\n            return 'red'\n        }\n        return 'blue';\n    }\n\n    buildRedirect(path) {\n        return <Redirect to={{\n            pathname: path,\n            state: {\n                member: this.state.member,\n                eventInfo: this.state.eventInfo\n            }\n        }} push/>\n    }\n\n    render() {\n        if (this.state.showEvent) {\n            return this.buildRedirect('showEvent');\n        }\n        if (this.state.editEvent) {\n            return this.buildRedirect('editEvent');\n        }\n        return (\n            <div className='EventCalendar'>\n                <FullCalendar\n                    defaultView=\"dayGridMonth\"\n                    firstDay={1}\n                    fixedWeekCount={false}\n                    header={{\n                        left: 'prev today next',\n                        center: 'title',\n                        right: 'dayGridMonth,timeGridWeek,listMonth'\n                    }}\n                    plugins={[dayGridPlugin, timeGridPlugin, listPlugin, interactionPlugin, bootstrapPlugin]}\n                    themeSystem=\"bootstrap\"\n                    displayEventTime={true}\n                    selectable={true}\n                    ref={this.calendarComponentRef}\n                    weekends={this.state.calendarWeekends}\n                    events={this.state.events}\n                    dateClick={this.handleDateClick}\n                    eventClick={this.handleEventClick}\n                />\n                <button onClick={this.createEvent}>Create Event</button>\n            </div>\n        )\n    }\n\n    handleEventClick = (arg) => {\n        console.log(\"going to event\", arg);\n        this.setState({showEvent: true, eventInfo: arg});\n    }\n\n    handleDateClick = (e) => {\n        console.log(\"DATE CLICKED\", e);\n        this.setState({editEvent: true, eventInfo: e});\n        // this.props.history.push({\n        //     pathname: '/editEvent',\n        //     state: {\n        //         date: new Date(e.date.getTime())\n        //     }\n        // })\n    }\n\n}\n// clearCurrentEvent = async () => {\n//     await this.setState({currentEvent: {}});\n//     console.log(\"state\", this.state);\n// }\n    // createEvent = () => {\n    //     this.setState({\n    //         isCreateEvent: true,\n    //         isEditing: true,\n    //     });\n    //     let start = new Date();\n    //     let end = new Date();\n    //     end.setDate(end.getDate() + 1);\n    //\n    //     this.setState({\n    //         currentEvent: {\n    //             id: uuid(),\n    //             start: start,\n    //             end: end\n    //         }\n    //     });\n    //\n    //     this.showModal();\n    // }\n//\n// eventRsvp = (event) => {\n//     console.log(\"event rsvp\", this.state.currentEvent);\n//     alert(\"you have been registered for event: \" + this.state.currentEvent.title);\n// }\n//\n// saveEvent = (event) => {\n//     this.modalToggle();\n//     console.log(\"saving event\", this.state.currentEvent);\n//     if (this.state.isCreateEvent) {\n//         this.setState({\n//             events: this.state.events.concat(Object.assign({}, this.state.currentEvent))\n//         })\n//     } else {\n//         let idx = this.state.events.findIndex(x => x.id === this.state.currentEvent.id)\n//         let eventsCopy = [...this.state.events];\n//         eventsCopy[idx] = this.state.currentEvent;\n//         this.setState({events: eventsCopy});\n//     }\n//     this.clearCurrentEvent();\n// }\n//\n","import React, {Component} from 'react';\n\nimport \"./SwitchableInputText.css\";\n\nexport default class SwitchableTextInput extends Component {\n    render() {\n        return (\n            <div data-testid=\"switchable-text-input\" className={this.props.className}>\n                <label>{this.props.label}</label>\n                {this.props.inputFlag ?\n                    <input type=\"text\" className=\"form-control\" value={this.props.value} onChange={(e)=>this.props.onChange(e.target.value)}/> :\n                    this.props.value}\n            </div>\n        );\n    }\n}\n","import React,{Component} from 'react';\nimport Loader from 'react-loader-spinner';\n\nexport default class EventDataLoader extends Component {\n    render() {\n        return (\n            <div className='loader'>\n                <h1>{this.props.name}</h1>\n                <h2>Loading</h2>\n                <Loader type=\"ThreeDots\" color=\"#2BAD60\" height=\"100\" width=\"100\"/>\n            </div>);\n    }\n}","import React, {Component} from 'react';\n\nimport \"./SwitchableInputText.css\";\nimport renderHTML from \"react-render-html\";\n\nexport default class SwitchableTextInput extends Component {\n    render() {\n        return (\n            <div data-testid=\"switchable-text-input\" className={this.props.className}>\n                <label>{this.props.label}</label><br/>\n                {this.props.displayFlag ?\n                    <div>{renderHTML(this.props.value)}</div> :\n                    <div></div>}\n            </div>\n        );\n    }\n}\n\n// {this.state.event.Details && this.state.event.Details.DescriptionHtml ?\n//     <div><h3>Description</h3><div>{renderHTML(this.state.event.Details.DescriptionHtml)}</div></div> :\n//     <div></div>}\n","import React, {Component} from 'react';\nimport {getAuthTokens} from \"../../utils/WildApricotOAuthUtils\";\nimport {getEventById} from \"../../utils/WildApricotEvents\";\nimport SwitchableTextInput from \"../SwitchableTextInput\";\nimport EventDataLoader from \"../event-data-loader/EventDataLoader\";\nimport {getContact} from \"../../utils/WildApricotContacts\";\nimport SwitchableHtmlDisplay from \"../SwitchableHtmlDisplay\";\nimport \"./EventDisplay.css\";\n\nexport default class EventDisplay extends Component {\n    state = {\n        fetch: true,\n        eventId: '',\n        waToken: {},\n        url: '',\n        event: null,\n        organizer: null,\n    }\n\n    async eventDetails() {\n    }\n\n    componentWillUnmount() {\n        console.log(\"unmounting########\");\n    }\n\n    async componentDidMount() {\n        await getAuthTokens((data) => this.setState({waToken: data}));\n        console.log(\"EVENT DETAILS\", this.props.location.state);\n        this.setState({\n            member: this.props.location.state.member,\n            eventInfo: this.props.location.state.eventInfo\n        })\n\n        console.log(\"STATE\",this.state);\n        // recurring event\n        if (this.state.eventInfo.event.extendedProps.parentId && this.state.fetch) {\n            await getEventById(this.state.waToken, this.state.eventInfo.event.extendedProps.parentId, (data) => {\n                let e = Object.assign({}, data);\n                this.setState({fetch: false});\n                console.log(\"props\", this.props);\n\n                let sess = data.Sessions.filter(x => x.Id === Number(this.state.eventInfo.event.id));\n                console.log(\"foundSession\", sess);\n                if (sess) {\n                    e.sessionId = sess[0].Id;\n                    e.Name = sess[0].Title;\n                    e.StartDate = sess[0].StartDate;\n                    e.EndDate = sess[0].EndDate;\n                }\n                console.log(\"theEvent\", e);\n                this.setState({event: e});\n            });\n        } else {\n            await getEventById(this.state.waToken, this.state.eventInfo.event.id, (data) => {\n                this.setState({event: data});\n            });\n        }\n        console.log('state', this.state);\n\n        if (this.state.event && this.state.event.Details && this.state.event.Details.Organizer) {\n            await getContact(this.state.waToken, this.state.event.Details.Organizer.Id, (data) => {\n                this.setState({organizer: data});\n                console.log(\"=====ORG\", data, this.state.organizer);\n            });\n            console.log(\"contact\", this.state.organizer);\n        }\n        console.log(\"state\", this.state);\n    }\n\n    render() {\n        if (this.state.event === null) {\n            return (<EventDataLoader name={this.props.location.state.name}/>);\n        } else {\n            return (\n                <div>\n                    <h2>{this.state.event.Name}</h2>\n                    <SwitchableTextInput className=\"event_id\" label=\"Event Id: \" value={this.state.event.Id}/>\n                    <SwitchableTextInput className=\"event-title\" label=\"Event Name: \" value={this.state.event.Name}/>\n                    <SwitchableTextInput className=\"event-start\" label=\"Event Start Date/Time: \"\n                                         value={this.state.event.StartDate}/>\n                    <SwitchableTextInput className=\"event-end\" label=\"Event End Date/Time: \"\n                                         value={this.state.event.EndDate}/>\n                    <SwitchableTextInput className=\"location\" label=\"Event Location: \"\n                                         value={this.state.event.Location}/>\n                    {this.state.organizer && <SwitchableTextInput className=\"organizer\" label=\"Organizer: \"\n                                                                  value={this.state.organizer.displayName + '(' + this.state.organizer.email + ')'}/>}\n\n                    <SwitchableHtmlDisplay className=\"descriptionHtml\" label=\"Description\" value={this.state.event.Details.DescriptionHtml} displayFlag={this.state.event.Details && this.state.event.Details.DescriptionHtml} />\n                </div>\n            );\n        }\n    }\n}","import React, {Component} from 'react';\n\nimport \"./SwitchableDatePicker.css\";\nimport DatePicker from \"react-datepicker\";\n\nexport default class SwitchableDatePicker extends Component {\n    render() {\n        return (\n            <div className=\"form-group\">\n                <label>{this.props.label}</label>\n                {!this.props.editFlag ? this.props.selected.toLocaleString() :\n                <DatePicker\n                    className=\"dateEntry\"\n                    selected={this.props.selected}\n                    onChange={this.props.handleChange}\n                    showTimeSelect\n                    timeFormat=\"HH:mm\"\n                    timeIntervals={15}\n                    timeCaption=\"time\"\n                    dateFormat=\"MMM d, yyyy h:mm aa\"\n                    startDate={this.props.start}\n                    endDate={this.props.end}\n                    minDate={this.props.minDate}\n                />\n                }\n            </div>\n        );\n\n    }\n}","import React, {Component} from 'react';\n// import {getAuthTokens} from \"../../utils/WildAppricotOAuthUtils\";\n// import {getEventById} from \"../../utils/WildApricotEvents\";\n// import SwitchableTextInput from \"../SwitchableTextInput\";\nimport CKEditor from \"@ckeditor/ckeditor5-react\";\n// NOTE: Use the editor from source (not a build)!\nimport ClassicEditor from \"@ckeditor/ckeditor5-build-classic\";\nimport SwitchableDatePicker from \"../SwitchableDatePicker\";\n// import Essentials from \"@ckeditor/ckeditor5-essentials\";\n// import Bold from \"@ckeditor/ckeditor5-basic-styles\";\n// import Italic from \"@ckeditor/ckeditor5-basic-styles\";\n// import Paragraph from \"@ckeditor/ckeditor5-paragraph\";\n\n// const editorConfiguration = {\n//     // plugins: [Essentials, Bold, Italic, Paragraph],\n//     plugins: [Essentials],\n//     toolbar: [\"bold\", \"italic\"]\n// };\n\n\nexport default class EventEditor extends Component {\n    constructor(props) {\n        super(props);\n        console.log(\"INCOMING PROPS\", props);\n\n        this.state = {\n            isEditing: true,\n            date: props.location.state.eventInfo.date,\n            description: \"\"\n        }\n    }\n\n    // componentDidMount() {\n    //     console.log(\"INCOMING DATE\", this.props);\n    //     this.setState({date: this.props.location.state.date});\n    //\n    //     console.log(\"STATE\", this.state);\n    // }\n\n    render() {\n\n        return (\n            <div className=\"App\">\n                <SwitchableDatePicker label=\"Date: \" editFlag={this.state.isEditing} selected={this.state.date} handleChange={this.handleStartChange} start={this.state.date} end={this.state.date}/>\n                <h2>Description</h2>\n                <CKEditor\n                    editor={ ClassicEditor }\n                    data=\"<p>Hello, csharp corner!</p><br/><br/> <b>This is demo for ckeditor 5 with React</br>\"\n                    onInit={ editor => {\n                        // You can store the \"editor\" and use when it is needed.\n                        console.log( 'Editor is ready to use!', editor );\n                    } }\n                    onChange={ ( event, editor ) => {\n                        const data = editor.getData();\n                        console.log( { event, editor, data } );\n                    } }\n                    onBlur={ ( event, editor ) => {\n                        console.log( 'Blur.', editor );\n                    } }\n                    onFocus={ ( event, editor ) => {\n                        console.log( 'Focus.', editor );\n                    } }\n                />\n            </div>\n        )\n    }\n\n    handleStartChange = async (dt) => {\n        await this.setState({date: {...this.state.date, date: dt}});\n    }\n\n}\n\n","import React from 'react';\nimport {HashRouter as Router, Route, Switch} from 'react-router-dom';\n//import logo from './logo.svg';\nimport './App.css';\nimport EventCalendar from \"./components/event-calendar/EventCalendar\";\nimport EventDisplay from \"./components/event-display/EventDisplay\";\nimport EventEditor from \"./components/event-edit/EventEditor\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Router basename=\"/\">\n                <Switch>\n                    {/*<Route exact path=\"/:memberId\" component={EventCalendar}/>*/}\n                    <Route exact path=\"/\" component={EventCalendar} />\n                    <Route exact path=\"/showEvent\" component={EventDisplay}/>\n                    <Route exact path=\"/editEvent\" component={EventEditor}/>\n                </Switch>\n                {/*<EventCalendar />*/}\n            </Router>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const axios = require('axios');\nconst qs = require('querystring');\n\nexport const getAuthTokens = async (cb) => {\n    console.log(\"url\", process.env.REACT_APP_WA_OAUTH_URL);\n    console.log(\"key\", process.env.REACT_APP_WA_API_KEY);\n\n    let basicAuthHeader = 'Basic ' + new Buffer('APIKEY:' + process.env.REACT_APP_WA_API_KEY).toString('base64');\n    let body = {\n        grant_type: 'client_credentials',\n        scope: 'auto',\n        obtain_refresh_token: true\n    };\n\n    const postConfig = {\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n            'Authorization': basicAuthHeader},\n    }\n\n    await axios.post(process.env.REACT_APP_WA_OAUTH_URL, qs.stringify(body), postConfig)\n        .then( (result) => {\n            cb(result.data);\n        })\n        .catch( (err) => {\n            console.log('error', err);\n        });\n}\n\n"],"sourceRoot":""}