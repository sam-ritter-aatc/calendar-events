{"version":3,"sources":["components/SwitchableTextInput.js","components/SwitchableDatePicker.js","components/SwitchableButton.js","components/EventCalendar.js","App.js","serviceWorker.js","index.js"],"names":["SwitchableTextInput","data-testid","className","this","props","label","inputFlag","type","value","onChange","e","target","Component","SwitchableDatePicker","editFlag","selected","handleChange","showTimeSelect","timeFormat","timeIntervals","timeCaption","dateFormat","startDate","start","endDate","end","minDate","toLocaleString","SwitchableButton","isVisible","Button","color","onClick","disabled","isDisabled","name","EventCalendar","calendarComponentRef","React","createRef","state","isCreateEvent","isEditing","currentEvent","id","title","description","location","organizer","Date","events","showCreateModal","calendarWeekends","modalToggle","setState","editToggle","userCanEdit","eventRsvp","event","console","log","alert","saveEvent","concat","Object","assign","idx","findIndex","x","eventsCopy","clearCurrentEvent","a","handleEventClick","arg","find","showModal","handleDateClick","date","getTime","setDate","getDate","uuid","createEvent","onChangeEventName","onChangeEventDescription","onChangeLocation","handleStartChange","handleEndChange","bind","defaultView","firstDay","fixedWeekCount","header","left","center","right","plugins","dayGridPlugin","timeGridPlugin","listPlugin","interactionPlugin","bootstrapPlugin","themeSystem","displayEventTime","selectable","ref","weekends","dateClick","eventClick","Modal","isOpen","toggle","constructor","ModalHeader","ModalBody","onSubmit","ModalFooter","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8f5762ca.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nimport \"./SwitchableInputText.css\";\n\nexport default class SwitchableTextInput extends Component {\n    render() {\n        return (\n            <div data-testid=\"switchable-text-input\" className={this.props.className}>\n                <label>{this.props.label}</label>\n                {this.props.inputFlag ?\n                    <input type=\"text\" className=\"form-control\" value={this.props.value} onChange={(e)=>this.props.onChange(e.target.value)}/> :\n                    this.props.value}\n            </div>\n        );\n    }\n}\n","import React, {Component} from 'react';\n\nimport \"./SwitchableDatePicker.css\";\nimport DatePicker from \"react-datepicker\";\n\nexport default class SwitchableDatePicker extends Component {\n    render() {\n        return (\n            <div className=\"form-group\">\n                <label>{this.props.label}</label>\n                {!this.props.editFlag ? this.props.selected.toLocaleString() :\n                <DatePicker\n                    className=\"endDateEntry\"\n                    selected={this.props.selected}\n                    onChange={this.props.handleChange}\n                    showTimeSelect\n                    timeFormat=\"HH:mm\"\n                    timeIntervals={15}\n                    timeCaption=\"time\"\n                    dateFormat=\"MMM d, yyyy h:mm aa\"\n                    startDate={this.props.start}\n                    endDate={this.props.end}\n                    minDate={this.props.minDate}\n                />\n                }\n            </div>\n        );\n\n    }\n}","import React, {Component} from 'react';\n\nimport \"./SwitchableButton.css\";\nimport {Button} from \"reactstrap\";\n\nexport default class SwitchableButton extends Component {\n    render() {\n        return <div className='SwitchableButton'>\n            {this.props.isVisible && <Button color={this.props.color} onClick={this.props.onClick} disabled={this.props.isDisabled}>{this.props.name}</Button>}\n        </div>\n    }\n}\n","import React, {Component} from 'react';\nimport {Button, Modal, ModalBody, ModalFooter, ModalHeader} from \"reactstrap\";\nimport uuid from \"react-uuid\";\nimport FullCalendar from '@fullcalendar/react'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport timeGridPlugin from '@fullcalendar/timegrid'\nimport interactionPlugin from '@fullcalendar/interaction' // needed for dayClick\nimport bootstrapPlugin from \"@fullcalendar/bootstrap\";\nimport listPlugin from '@fullcalendar/list';\n\nimport \"./EventCalendar.css\";\n\nimport SwitchableTextInput from \"./SwitchableTextInput\";\nimport SwitchableDatePicker from \"./SwitchableDatePicker\";\nimport SwitchableButton from \"./SwitchableButton\";\n\n\nexport default class EventCalendar extends Component {\n    constructor(props) {\n        super(props);\n        // this.onSubmit = this.onSubmit.bind(this);\n        this.onChangeEventName = this.onChangeEventName.bind(this);\n        this.onChangeEventDescription = this.onChangeEventDescription.bind(this);\n        this.onChangeLocation = this.onChangeLocation.bind(this);\n        // this.handleStartChange = this.handleStartChange.bind(this);\n        // this.handleEndChange = this.handleEndChange.bind(this);\n    }\n\n    calendarComponentRef = React.createRef()\n\n    state = {\n        isCreateEvent: false,\n        isEditing: false,\n        currentEvent: {\n            id: '',\n            title: '',\n            description: '',\n            location: '',\n            organizer: '',\n            start: new Date(),\n            end: new Date()\n        },\n        events: [],\n        showCreateModal: false,\n        calendarWeekends: true,\n    }\n\n    // componentDidMount() {\n    //     fetch('/api/list')\n    //         .then(res => res.json())\n    //         .then(events => this.setState({events: events, update: true}, () => {\n    //             console.log(events);\n    //             var myEvents = events.map((event) => {\n    //                 return {\n    //                     id: event.id,\n    //                     title: event.summary,\n    //                     start: event.start.dateTime || event.start.date,\n    //                     end: event.end.dateTime || event.end.date,\n    //                     organizer: event.organizer,\n    //                     created: event.created,\n    //                     updated: event.updated,\n    //                     location: event.location\n    //                 }\n    //             });\n    //             console.log(\"myEvents\", myEvents);\n    //             this.setState({events: myEvents});\n    //         }))\n    //         .catch((error) => console.error(error))\n    // }\n\n    modalToggle = () => {\n        this.setState({showCreateModal: !this.state.showCreateModal});\n    }\n\n    editToggle = () => {\n        this.setState({isEditing: !this.state.isEditing});\n    }\n\n    render() {\n        return (\n            <div className='EventCalendar'>\n                <FullCalendar\n                    defaultView=\"dayGridMonth\"\n                    firstDay={1}\n                    fixedWeekCount={false}\n                    header={{\n                        left: 'prev today next',\n                        center: 'title',\n                        right: 'dayGridMonth,timeGridWeek,listMonth'\n                    }}\n                    plugins={[dayGridPlugin, timeGridPlugin, listPlugin, interactionPlugin, bootstrapPlugin]}\n                    themeSystem=\"bootstrap\"\n                    displayEventTime={true}\n                    selectable={true}\n                    ref={this.calendarComponentRef}\n                    weekends={this.state.calendarWeekends}\n                    events={this.state.events}\n                    dateClick={this.handleDateClick}\n                    eventClick={this.handleEventClick}\n                />\n                <Modal\n                    isOpen={this.state.showCreateModal}\n                    toggle={this.modalToggle}\n                    className={this.constructor.name}\n                >\n                    <ModalHeader toggle={this.modalToggle}>\n                        {this.state.isCreateEvent ? \"Create New Event\" : this.state.currentEvent.title}\n                    </ModalHeader>\n                    <ModalBody>\n                        <form onSubmit={this.onSubmit}>\n                            {!this.state.isCreateEvent && <div className=\"form-group\">\n                                <label>Event ID: {this.state.currentEvent.id}</label>\n                            </div>}\n\n                            <SwitchableTextInput label=\"Event Name: \" className=\"form-group\" value={this.state.currentEvent.title} onChange={this.onChangeEventName} inputFlag={this.state.isEditing} />\n\n                            <SwitchableTextInput label=\"Event Description: \" className=\"form-group\" value={this.state.currentEvent.description} onChange={this.onChangeEventDescription} inputFlag={this.state.isEditing} />\n\n                            <SwitchableTextInput label=\"Event Location: \" className=\"form-group\" value={this.state.currentEvent.location} onChange={this.onChangeLocation} inputFlag={this.state.isEditing} />\n\n                            <SwitchableDatePicker label=\"Start Date: \" editFlag={this.state.isEditing} selected={this.state.currentEvent.start} handleChange={this.handleStartChange} start={this.state.currentEvent.start} end={this.state.currentEvent.end}/>\n\n                            <SwitchableDatePicker label=\"End Date: \" editFlag={this.state.isEditing} selected={this.state.currentEvent.end} handleChange={this.handleEndChange} start={this.state.currentEvent.start} end={this.state.currentEvent.end} minDate={this.state.currentEvent.start}/>\n                        </form>\n                    </ModalBody>\n                    <ModalFooter>\n                        <SwitchableButton isVisible={!this.state.isCreateEvent} color=\"warning\" onClick={this.editToggle} isDisabled={false} name=\"Edit\" />\n                        <SwitchableButton isVisible={this.state.isEditing} color=\"primary\" onClick={this.saveEvent} isDisabled={!this.state.isEditing} name=\"Save\" />\n                        <SwitchableButton isVisible={!this.state.isEditing} color=\"danger\" onClick={this.eventRsvp} isDisabled={false} name=\"RSVP\" />\n                        <Button color=\"secondary\" onClick={this.modalToggle}>Cancel</Button>\n                    </ModalFooter>\n                </Modal>\n                <button onClick={this.createEvent}>Create Event</button>\n            </div>\n        )\n    }\n\n    userCanEdit = () => {\n        return true;\n    }\n\n    eventRsvp = (event) => {\n        console.log(\"event rsvp\",this.state.currentEvent);\n        alert( \"you have been registered for event: \"+this.state.currentEvent.title);\n    }\n\n    saveEvent = (event) => {\n        this.modalToggle();\n        console.log(\"saving event\", this.state.currentEvent);\n        if (this.state.isCreateEvent) {\n            this.setState({\n                events: this.state.events.concat(Object.assign({}, this.state.currentEvent))\n            })\n        } else {\n            let idx = this.state.events.findIndex(x => x.id === this.state.currentEvent.id)\n            let eventsCopy = [...this.state.events];\n            eventsCopy[idx] = this.state.currentEvent;\n            this.setState({events: eventsCopy});\n        }\n        this.clearCurrentEvent();\n    }\n\n    clearCurrentEvent = async () => {\n        await this.setState({currentEvent: {}});\n        console.log(\"state\", this.state);\n    }\n\n    handleEventClick = async (arg) => {\n        this.setState({\n            isCreateEvent: false,\n            isEditing: false\n        });\n        console.log(\"eventClicked\", arg);\n        await this.setState({currentEvent: this.state.events.find(x => x.id === arg.event.id)});\n        this.showModal(arg)\n    }\n\n    handleDateClick = (e) => {\n        this.setState({\n            isCreateEvent: true,\n            isEditing: true,\n            currentEvent: e,\n        });\n        let start = new Date(e.date.getTime());\n        let end = new Date(e.date.getTime());\n        end.setDate(end.getDate() + 1);\n\n        this.setState({\n            currentEvent: {\n                id: uuid(),\n                start: start,\n                end: end\n            }\n        });\n\n        this.showModal(e);\n    }\n\n    createEvent = () => {\n        this.setState({\n            isCreateEvent: true,\n            isEditing: true,\n        });\n        let start = new Date();\n        let end = new Date();\n        end.setDate(end.getDate() + 1);\n\n        this.setState({\n            currentEvent: {\n                id: uuid(),\n                start: start,\n                end: end\n            }\n        });\n\n        this.showModal();\n    }\n\n    showModal = e => {\n        console.log(\"showModal - incoming e\", e);\n\n        this.modalToggle();\n    };\n\n    onChangeEventName = async (e) => {\n        await this.setState({currentEvent: {...this.state.currentEvent, title: e}});\n    }\n    onChangeEventDescription = async (e) => {\n        await this.setState({currentEvent: {...this.state.currentEvent, description: e}});\n    }\n    onChangeLocation = async (e) => {\n        await this.setState({currentEvent: {...this.state.currentEvent, location: e}});\n    }\n\n    handleStartChange = async (date) => {\n        await this.setState({currentEvent: {...this.state.currentEvent, start: date}});\n    }\n\n    handleEndChange = async (date) => {\n        await this.setState({currentEvent: {...this.state.currentEvent, end: date}});\n    }\n}\n","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport EventCalendar from \"./components/EventCalendar\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <EventCalendar />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}